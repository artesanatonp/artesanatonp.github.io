{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Router from \"next/router\";\n\nconst _saveCart = item => {\n  let cart = getCart();\n  let found;\n  cart = cart.map(_item => {\n    if (_item.produto === item.produto && _item.variacao === item.variacao) {\n      found = true;\n      return _objectSpread({}, _item, {\n        quantidade: Number(_item.quantidade) + Number(item.quantidade)\n      });\n    } else return _item;\n  });\n  if (!found) cart.push(item);\n  localStorage.setItem(\"@cart\", JSON.stringify(cart));\n};\n\nexport const getCart = () => JSON.parse(localStorage.getItem(\"@cart\") || \"[]\");\nexport const cleanCart = () => localStorage.removeItem(\"@cart\");\nexport const addCart = (item, goToCart = true) => {\n  _saveCart(item);\n\n  if (goToCart) Router.push(\"/carrinho\");\n};\nexport const getCountItemsCart = () => getCart().reduce((c, {\n  quantidade\n}) => c + (Number(quantidade) || 1), 0);\nexport const removeCart = index => {\n  let cart = getCart();\n  cart = cart.reduce((all, item, _index) => index !== _index ? all.concat([item]) : all, []);\n  localStorage.setItem(\"@cart\", JSON.stringify(cart));\n};\nexport default {\n  getCart,\n  addCart,\n  cleanCart,\n  getCountItemsCart,\n  removeCart\n};","map":null,"metadata":{},"sourceType":"module"}